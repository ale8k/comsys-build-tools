/* groovylint-disable CompileStatic, LineLength, NestedBlockDepth, VariableTypeRequired */
String slave3 = 'slave-3'
String proxyAddress = 'http://squid.internal:3128'
String imageName = 'canonical-cs-busybox'
String registryUrl = 'stg-commercial-systems.ps5.docker-registry.canonical.com'

pipeline {
    agent {
        label "${ slave3 }"
    }
    parameters {
        choice(
            name: 'Release',
            choices: ['focal', 'bionic', 'xenial'],
            description: 'The ubuntu release to use as the base image'
        )
        choice(
            name: 'SnapcraftChannel',
            choices: ['stable', 'candidate', 'beta', 'edge'],
            description: 'The channel to install snapcraft from'
        )
    }
    environment {
        HTTP_PROXY = "${proxyAddress}"
        HTTPS_PROXY = "${proxyAddress}"
        DOCKER_BUILDKIT = 1
        DOCKER_CREDS_73253b943a0d = credentials("${registryUrl}")
        REGISTRY_URL = "${registryUrl}"
    }
    stages {
        stage('Build image') {
            steps {
                sh """
                    docker build \
                        --build-arg UBUNTU=${params.Release} \
                        --build-arg RISK=${params.SnapcraftChannel} \
                        --build-arg http_proxy=${env.HTTP_PROXY} \
                        --build-arg https_proxy=${env.HTTPS_PROXY} \
                        -f ${env.WORKSPACE}/oci/Dockerfile.busybox \
                        -t canonical-cs-busybox:latest \
                        -t ${imageName}:${env.BUILD_NUMBER} \
                        ${env.WORKSPACE}
                """
            }
        }
        stage('Test image') {
            steps {
                sh 'docker run -i canonical-cs-busybox:latest which go'
                sh 'docker run -i canonical-cs-busybox:latest which pip'
                sh 'docker run -i canonical-cs-busybox:latest which charmcraft'
                sh 'docker run -i canonical-cs-busybox:latest which snapcraft'
                sh 'docker run -i canonical-cs-busybox:latest which yq'
                sh 'docker run -i canonical-cs-busybox:latest which golangci-lint'
                sh 'docker run -i canonical-cs-busybox:latest which git'
            }
        }
        stage('Push image') {
            steps {
                script {
                    sh 'docker tag canonical-cs-busybox:latest $REGISTRY_URL/canonical-cs-busybox:latest'
                    sh 'docker tag canonical-cs-busybox:latest $REGISTRY_URL/canonical-cs-busybox:$BUILD_NUMBER'

                    sh 'docker push $REGISTRY_URL/canonical-cs-busybox:latest'
                    sh 'docker push $REGISTRY_URL/canonical-cs-busybox:$BUILD_NUMBER'
                }
            }
        }
    }
}

